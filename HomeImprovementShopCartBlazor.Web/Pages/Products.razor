@page "/products"
@using HomeImprovementShopCartBlazor.Models.Dtos
@using HomeImprovementShopCartBlazor.Web.Services.Contracts
@inject IProductService ProductService
@inject IShoppingCartService ShoppingCartService
@inject IManageProductsLocalStorageService ManageProductsLocalStorageService 
@inject IManageCartItemsLocalStorageService ManageCartItemsLocalStorageService
@inject NavigationManager NavigationManager

@if(AllProducts == null && ErrorMessage == null)
{
    <DisplaySpinner/>

}
else if(ErrorMessage != null)
{
    <DisplayError ErrorMessage="@ErrorMessage"></DisplayError>
}
else
{
   @*  <h3 class="mb-5">Products</h3> *@

    var productCount = AllProducts.Count();

    @if (productCount > 0)
    {
        @foreach(var prodGroup in GetGroupedProductsByCategory())
        {
            <h4>@GetCategoryName(prodGroup)</h4>
                    
            <div class = "row mt-3">
                <DisplayProducts Products = "@prodGroup.Take(4)"></DisplayProducts>
            </div>
            <hr class="mb-3"/>
        }

    }

}

@code{
    private IEnumerable<ProductDto> AllProducts { get; set; }

    public string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ClearLocalStorage();

            AllProducts = await ManageProductsLocalStorageService.GetCollection();

            var shoppingCartItems = await ManageCartItemsLocalStorageService.GetCollection();

            var totalQty = shoppingCartItems.Sum(i => i.Qty);

            ShoppingCartService.RaiseEventOnShoppingCartChanged(totalQty);

        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;

        }

    }

    protected IOrderedEnumerable<IGrouping<int, ProductDto>> GetGroupedProductsByCategory()
    {
        return from product in AllProducts
               group product by product.CategoryId into prodByCatGroup
               orderby prodByCatGroup.Key
               select prodByCatGroup;
    }
    protected string GetCategoryName(IGrouping<int, ProductDto> groupedProductDtos)
    {
        return groupedProductDtos.FirstOrDefault(pg => pg.CategoryId == groupedProductDtos.Key).CategoryName;
    }

    private async Task ClearLocalStorage()
    {
        await ManageProductsLocalStorageService.RemoveCollection();
        await ManageCartItemsLocalStorageService.RemoveCollection();
    }
}
