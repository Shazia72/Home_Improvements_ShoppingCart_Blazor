@page "/ProductDetails/{Id:int}"
@using HomeImprovementShopCartBlazor.Models.Dtos
@using HomeImprovementShopCartBlazor.Web.Services.Contracts
@inject IProductService ProductService
@inject IShoppingCartService ShoppingCartService 
@inject IManageProductsLocalStorageService ManageProductsLocalStorageService 
@inject IManageCartItemsLocalStorageService ManageCartItemsLocalStorageService
@inject NavigationManager NavigationManager

@if (Product == null && ErrorMessage == null)
{
    <DisplaySpinner/>
}
else if (ErrorMessage != null)
{
    <DisplayError ErrorMessage="@ErrorMessage"></DisplayError>
}
else
{
    <h3 class="mb-5">Details</h3>
    <div class="row">
        <div class="col-md-6 mb-4">
            <img class="img-fluid" src="@Product.ImageURL">       
        </div>
        <div class="col-md-6">
            <h3>@Product.Name</h3>
            <p class="mb-4">@Product.Description</p>
            <p class="mb-4">
                <b>
                    @Product.Price.ToString("C")&nbsp;(@Product.Qty items in stock)
                </b>
            </p>
            <div>
                <button class="btn btn-outline-success"
                @onclick ="() => (AddToCart_Click(new CartItemToAddDto{
                    CartId = HardCoded.CartId,
                    ProductId = Product.Id,
                    Qty = 1
                }))"
                ><b>Add to Cart</b></button>
            </div>
        </div>

    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    public ProductDto Product { get; set; }

    public string ErrorMessage { get; set; }

    private List<CartItemDto> ShoppingCartItems { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ShoppingCartItems = await ManageCartItemsLocalStorageService.GetCollection();
            Product = await GetProductById(Id);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected async Task AddToCart_Click(CartItemToAddDto cartItemToAddDto)
    {
        try
        {
            var cartItemDto = await ShoppingCartService.AddItem(cartItemToAddDto);

            if (cartItemDto != null)
            {
                ShoppingCartItems.Add(cartItemDto);
                await ManageCartItemsLocalStorageService.SaveCollection(ShoppingCartItems);
            }

            NavigationManager.NavigateTo("/ShoppingCart");
        }
        catch (Exception)
        {

            //Log Exception
        }
    }

    private async Task<ProductDto> GetProductById(int id)
    {
        var productDtos = await ManageProductsLocalStorageService.GetCollection();

        if (productDtos != null)
        {
            return productDtos.SingleOrDefault(p => p.Id == id);
        }
        return null;
    }
}
